MACRO(NEW_EXECUTABLE EXECUTABLE_NAME)

    LINK_DIRECTORIES(${PATH_LIST})
    ADD_EXECUTABLE(${EXECUTABLE_NAME} ${EXECUTABLE_FILES})

    SET_TARGET_PROPERTIES(${EXECUTABLE_NAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
    SET_TARGET_PROPERTIES(${EXECUTABLE_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                        ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                        LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                        LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                        RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/bin"
                                                        RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/bin")

    TARGET_INCLUDE_DIRECTORIES(${EXECUTABLE_NAME} PUBLIC ${EXTERNAL_INCLUDES})
    TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME} ${EXTERNAL_LIBRARIES})
    INSTALL(TARGETS ${EXECUTABLE_NAME} RUNTIME DESTINATION ${INSTALL_BINDIR}
                                        LIBRARY DESTINATION ${INSTALL_ARCHIVEDIR}
                                        ARCHIVE DESTINATION ${INSTALL_ARCHIVEDIR} OPTIONAL)

ENDMACRO(NEW_EXECUTABLE)

MACRO(NEW_CUDA_EXECUTABLE EXECUTABLE_NAME)

    LINK_DIRECTORIES(${PATH_LIST})
    IF(MUSA_FOUND)
        MUSA_ADD_EXECUTABLE(${EXECUTABLE_NAME} ${EXECUTABLE_FILES})
    ELSE()
        CUDA_ADD_EXECUTABLE(${EXECUTABLE_NAME} ${EXECUTABLE_FILES})
    ENDIF()

    SET_TARGET_PROPERTIES(${EXECUTABLE_NAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
    SET_TARGET_PROPERTIES(${EXECUTABLE_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                        ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                        LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                        LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                        RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/bin"
                                                        RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/bin")

    TARGET_INCLUDE_DIRECTORIES(${EXECUTABLE_NAME} PUBLIC ${EXTERNAL_INCLUDES})
    TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME} ${EXTERNAL_LIBRARIES})
    INSTALL(TARGETS ${EXECUTABLE_NAME} RUNTIME DESTINATION ${INSTALL_BINDIR}
                                        LIBRARY DESTINATION ${INSTALL_ARCHIVEDIR}
                                        ARCHIVE DESTINATION ${INSTALL_ARCHIVEDIR} OPTIONAL)

ENDMACRO(NEW_CUDA_EXECUTABLE)

MACRO(NEW_LIBRARY LIBRARY_NAME LIBRARY_TYPE)

    LINK_DIRECTORIES(${PATH_LIST})
    ADD_LIBRARY(${LIBRARY_NAME} ${LIBRARY_TYPE} ${LIBRARY_FILES})

    SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
    SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                     ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                     LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                     LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                     RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/bin"
                                                     RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/bin")

    TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME} PUBLIC ${EXTERNAL_INCLUDES})
    TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${EXTERNAL_LIBRARIES})
    INSTALL(TARGETS ${LIBRARY_NAME} RUNTIME DESTINATION ${INSTALL_BINDIR}
                                    LIBRARY DESTINATION ${INSTALL_ARCHIVEDIR}
                                    ARCHIVE DESTINATION ${INSTALL_ARCHIVEDIR} OPTIONAL)

ENDMACRO(NEW_LIBRARY)

MACRO(NEW_CUDA_LIBRARY LIBRARY_NAME LIBRARY_TYPE)

    LINK_DIRECTORIES(${PATH_LIST})
    IF(MUSA_FOUND)
        MUSA_ADD_LIBRARY(${LIBRARY_NAME} ${LIBRARY_TYPE} ${LIBRARY_FILES})
    ELSE()
        CUDA_ADD_LIBRARY(${LIBRARY_NAME} ${LIBRARY_TYPE} ${LIBRARY_FILES})
    ENDIF()

    SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
    SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                     ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                     LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                     LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                     RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/bin"
                                                     RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/bin")

    TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME} PUBLIC ${EXTERNAL_INCLUDES})
    TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${EXTERNAL_LIBRARIES})
    INSTALL(TARGETS ${LIBRARY_NAME} RUNTIME DESTINATION ${INSTALL_BINDIR}
                                    LIBRARY DESTINATION ${INSTALL_ARCHIVEDIR}
                                    ARCHIVE DESTINATION ${INSTALL_ARCHIVEDIR} OPTIONAL)

ENDMACRO(NEW_CUDA_LIBRARY)

MACRO(NEW_PLUGIN LIBRARY_NAME LIBRARY_TYPE)

    LINK_DIRECTORIES(${PATH_LIST})
    ADD_LIBRARY(${LIBRARY_NAME} ${LIBRARY_TYPE} ${LIBRARY_FILES})

    SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
    SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                     ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                     LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                     LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                     RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/bin"
                                                     RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/bin")

    TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME} PUBLIC ${EXTERNAL_INCLUDES})
    TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${EXTERNAL_LIBRARIES})

ENDMACRO(NEW_PLUGIN)

MACRO(NEW_CUDA_PLUGIN LIBRARY_NAME LIBRARY_TYPE)

    LINK_DIRECTORIES(${PATH_LIST})
    IF(MUSA_FOUND)
        MUSA_ADD_LIBRARY(${LIBRARY_NAME} ${LIBRARY_TYPE} ${LIBRARY_FILES})
    ELSE()
        CUDA_ADD_LIBRARY(${LIBRARY_NAME} ${LIBRARY_TYPE} ${LIBRARY_FILES})
    ENDIF()

    SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
    SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                     ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                     LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/lib"
                                                     LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/lib"
                                                     RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_BINARY_DIR}/bin"
                                                     RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_BINARY_DIR}/bin")

    TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME} PUBLIC ${EXTERNAL_INCLUDES})
    TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${EXTERNAL_LIBRARIES})

ENDMACRO(NEW_CUDA_PLUGIN)

MACRO(FIND_DEPENDENCE DEP_NAME INCLUDE_NAMES LIB_NAMES INC_PATH_POSTFIX)

    SET(${DEP_NAME}_FOUND FALSE)
    SET(${DEP_NAME}_FEATURE_ENABLED ON CACHE BOOL "Enable to search for ${DEP_NAME} dependencies")
    IF(${DEP_NAME}_FEATURE_ENABLED)
        IF(NOT "${INC_PATH_POSTFIX}" STREQUAL "")
            FIND_PATH(${DEP_NAME}_INCLUDE_DIR ${INCLUDE_NAMES}
                PATHS ${THIRDPARTY_ROOT}/include/${INC_PATH_POSTFIX}
                /usr/include/${INC_PATH_POSTFIX}
                /usr/local/include/${INC_PATH_POSTFIX}
                NO_CMAKE_FIND_ROOT_PATH
            )
        ELSE()
            FIND_PATH(${DEP_NAME}_INCLUDE_DIR ${INCLUDE_NAMES}
                PATHS ${THIRDPARTY_ROOT}/include
                /usr/include /usr/local/include
                NO_CMAKE_FIND_ROOT_PATH
            )
        ENDIF()

        IF(NOT "${LIB_NAMES}" STREQUAL "")
            FIND_PATH(${DEP_NAME}_LIB_DIR ${LIB_NAMES}
                PATHS ${THIRDPARTY_ROOT}/lib
                /usr/lib /usr/${FIND_LIB_POSTFIX} /usr/lib/${FIND_SUBLIB_POSTFIX}
                /usr/local/lib /usr/local/${FIND_LIB_POSTFIX}
                NO_CMAKE_FIND_ROOT_PATH
            )

            IF(${DEP_NAME}_INCLUDE_DIR AND ${DEP_NAME}_LIB_DIR)
                INCLUDE_DIRECTORIES(${${DEP_NAME}_INCLUDE_DIR})
                LINK_DIRECTORIES(${${DEP_NAME}_LIB_DIR})
                SET(${DEP_NAME}_FOUND TRUE)
            ELSE(${DEP_NAME}_INCLUDE_DIR AND ${DEP_NAME}_LIB_DIR)
                MESSAGE("[osgVerse] Dependency ${DEP_NAME} not found. Some modules and functionalities will be ignored.")
            ENDIF(${DEP_NAME}_INCLUDE_DIR AND ${DEP_NAME}_LIB_DIR)
        ELSE()
            IF(${DEP_NAME}_INCLUDE_DIR)
                INCLUDE_DIRECTORIES(${${DEP_NAME}_INCLUDE_DIR})
                SET(${DEP_NAME}_FOUND TRUE)
            ELSE(${DEP_NAME}_INCLUDE_DIR)
                MESSAGE("[osgVerse] Dependency ${DEP_NAME} not found. Some modules and functionalities will be ignored.")
            ENDIF(${DEP_NAME}_INCLUDE_DIR)
        ENDIF()
    ENDIF(${DEP_NAME}_FEATURE_ENABLED)

    IF(${DEP_NAME}_FOUND)
        SET_PROPERTY(GLOBAL APPEND PROPERTY VERSE_DEPENDENCIES "${DEP_NAME}")
    ENDIF()

ENDMACRO(FIND_DEPENDENCE)

MACRO(USE_MSVC_DEBUGGER EXECUTABLE_NAME PATH_ENV)

    IF(MSVC)
        SET_TARGET_PROPERTIES(${EXECUTABLE_NAME}
            PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_INSTALL_PREFIX}/bin")
        IF("${CMAKE_VERSION}" VERSION_GREATER 3.12)
            SET_TARGET_PROPERTIES(${EXECUTABLE_NAME}
                PROPERTIES VS_DEBUGGER_ENVIRONMENT "PATH=%PATH%;${PATH_ENV}")
        ENDIF()
    ENDIF(MSVC)

ENDMACRO(USE_MSVC_DEBUGGER)

MACRO(USE_STATIC_RUNTIME)

    IF(MSVC)
        FOREACH(FLAG_VAR
                CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
                CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
            IF(${FLAG_VAR} MATCHES "/MD")
                STRING(REGEX REPLACE "/MD" "/MT" ${FLAG_VAR} "${${FLAG_VAR}}")
            ENDIF(${FLAG_VAR} MATCHES "/MD")
        ENDFOREACH(FLAG_VAR)
    ENDIF(MSVC)

ENDMACRO(USE_STATIC_RUNTIME)
